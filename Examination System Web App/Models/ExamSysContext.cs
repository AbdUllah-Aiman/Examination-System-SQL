// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Examination_System_Web_App.Models;

public partial class ExamSysContext : DbContext
{
    public ExamSysContext()
    {
    }

    public ExamSysContext(DbContextOptions<ExamSysContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Choice> Choices { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<Std_course> Std_courses { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<Student_answer> Student_answers { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    public virtual DbSet<Works_in> Works_ins { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=tcp:pdsqlproject.database.windows.net,1433;Initial Catalog=ExamSys;User ID=sqladmin@pdsqlproject;Password=Adminpass_123");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.branch_no).HasName("PK__Branch__E55E5F456659B3C9");

            entity.ToTable("Branch");

            entity.Property(e => e.branch_name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.location)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Choice>(entity =>
        {
            entity.HasKey(e => new { e.q_id, e.ch_no }).HasName("pk_choice");

            entity.ToTable("Choice");

            entity.Property(e => e.ch_text).IsUnicode(false);

            entity.HasOne(d => d.q_idNavigation).WithMany(p => p.Choices)
                .HasForeignKey(d => d.q_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Choice__q_id__08B54D69");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.crs_id).HasName("PK__Course__ECAF5375F84ABB33");

            entity.ToTable("Course");

            entity.Property(e => e.crs_name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.dept_no).HasName("PK__Departme__DCA63FA6C64B0777");

            entity.ToTable("Department");

            entity.Property(e => e.dept_name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.sup).WithMany(p => p.Departments)
                .HasForeignKey(d => d.sup_id)
                .HasConstraintName("fk_department");

            entity.HasMany(d => d.crs).WithMany(p => p.dept_nos)
                .UsingEntity<Dictionary<string, object>>(
                    "Dept_course",
                    r => r.HasOne<Course>().WithMany()
                        .HasForeignKey("crs_id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Dept_cour__crs_i__7E37BEF6"),
                    l => l.HasOne<Department>().WithMany()
                        .HasForeignKey("dept_no")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Dept_cour__dept___7D439ABD"),
                    j =>
                    {
                        j.HasKey("dept_no", "crs_id").HasName("pk_dept_course");
                        j.ToTable("Dept_course");
                    });
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasKey(e => e.exam_id).HasName("PK__Exam__9C8C7BE988183B29");

            entity.ToTable("Exam");

            entity.Property(e => e.exam_date).HasColumnType("datetime");
            entity.Property(e => e.exam_duration).HasDefaultValue(120);
            entity.Property(e => e.exam_name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.crs).WithMany(p => p.Exams)
                .HasForeignKey(d => d.crs_id)
                .HasConstraintName("FK__Exam__crs_id__778AC167");
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.HasKey(e => e.ins_id).HasName("PK__Instruct__9CB72D209C1FBDC1");

            entity.ToTable("Instructor");

            entity.Property(e => e.ins_email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ins_fname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ins_gender)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ins_lname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ins_password)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasMany(d => d.crs).WithMany(p => p.ins)
                .UsingEntity<Dictionary<string, object>>(
                    "Inst_course",
                    r => r.HasOne<Course>().WithMany()
                        .HasForeignKey("crs_id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Inst_cour__crs_i__02084FDA"),
                    l => l.HasOne<Instructor>().WithMany()
                        .HasForeignKey("ins_id")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Inst_cour__ins_i__01142BA1"),
                    j =>
                    {
                        j.HasKey("ins_id", "crs_id").HasName("pk_inst_course");
                        j.ToTable("Inst_course");
                    });
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.q_id).HasName("PK__Question__3D59B310821E6021");

            entity.ToTable("Question");

            entity.Property(e => e.q_text).IsUnicode(false);
            entity.Property(e => e.q_type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.crs).WithMany(p => p.Questions)
                .HasForeignKey(d => d.crs_id)
                .HasConstraintName("FK__Question__crs_id__7A672E12");
        });

        modelBuilder.Entity<Std_course>(entity =>
        {
            entity.HasKey(e => new { e.std_id, e.crs_id }).HasName("pk_std_course");

            entity.ToTable("Std_course");

            entity.Property(e => e.status)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.crs).WithMany(p => p.Std_courses)
                .HasForeignKey(d => d.crs_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_std_course_crs_id");

            entity.HasOne(d => d.std).WithMany(p => p.Std_courses)
                .HasForeignKey(d => d.std_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_std_course_std_id");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.std_id).HasName("PK__Student__0B0245BAE0334036");

            entity.ToTable("Student");

            entity.HasIndex(e => e.std_email, "cons").IsUnique();

            entity.Property(e => e.std_email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.std_fname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.std_gender)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.std_lname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.std_password)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.branch_noNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.branch_no)
                .HasConstraintName("FK__Student__branch___6B24EA82");

            entity.HasOne(d => d.dept_noNavigation).WithMany(p => p.Students)
                .HasForeignKey(d => d.dept_no)
                .HasConstraintName("FK__Student__dept_no__6A30C649");
        });

        modelBuilder.Entity<Student_answer>(entity =>
        {
            entity.HasKey(e => new { e.std_id, e.exam_id, e.q_id });

            entity.ToTable("Student_answer");

            entity.HasOne(d => d.exam).WithMany(p => p.Student_answers)
                .HasForeignKey(d => d.exam_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_a__exam___04E4BC85");

            entity.HasOne(d => d.q_idNavigation).WithMany(p => p.Student_answers)
                .HasForeignKey(d => d.q_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_an__q_id__05D8E0BE");

            entity.HasOne(d => d.std).WithMany(p => p.Student_answers)
                .HasForeignKey(d => d.std_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_a__std_i__03F0984C");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => e.top_id).HasName("PK__Topic__B582A63D45B68EB7");

            entity.ToTable("Topic");

            entity.Property(e => e.top_name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.crs).WithMany(p => p.Topics)
                .HasForeignKey(d => d.crs_id)
                .HasConstraintName("FK__Topic__crs_id__6754599E");
        });

        modelBuilder.Entity<Works_in>(entity =>
        {
            entity.HasKey(e => new { e.ins_id, e.branch_no, e.dept_no }).HasName("pk_works_in");

            entity.ToTable("Works_in");

            entity.HasOne(d => d.branch_noNavigation).WithMany(p => p.Works_ins)
                .HasForeignKey(d => d.branch_no)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Works_in__branch__72C60C4A");

            entity.HasOne(d => d.dept_noNavigation).WithMany(p => p.Works_ins)
                .HasForeignKey(d => d.dept_no)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Works_in__dept_n__73BA3083");

            entity.HasOne(d => d.ins).WithMany(p => p.Works_ins)
                .HasForeignKey(d => d.ins_id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Works_in__ins_id__71D1E811");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}